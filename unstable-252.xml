<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>3539</fr:anchor><fr:addr
type="machine">#252</fr:addr><fr:route>unstable-252.xml</fr:route><fr:title
text="11/14/2024 › Daily Summary"><fr:link
type="local"
href="log-0003.xml"
addr="log-0003"
title="11/14/2024">11/14/2024</fr:link> › Daily Summary</fr:title><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter>
    <fr:strong>GPU Project:</fr:strong>
    <fr:ul><fr:li>Have GPU kernel for part of chaining algorithm. Makes a CPU call for another part</fr:li>
      <fr:ul><fr:li>Need to write a kernel for a naturally sequential DP.</fr:li>
        <fr:li>My initial impression is just how to reuse any memory accesses that have been done for the current GPU kernel.</fr:li></fr:ul>
      <fr:li>Key question is does even a naive kernel implementation speed up the overall program due to the eliminated memory transfer between GPU and CPU?</fr:li></fr:ul>
    <fr:strong>Contrastive RL:</fr:strong>
    <fr:ul><fr:li>Question is how to do contrastive RL in a lifelong setting? i.e. non-episodic and potentially changing reward functions.</fr:li>
      <fr:li>Have a pretty good idea how to implement the ant gather environment. However, current setup returns object positions.</fr:li>
      <fr:ul><fr:li>If there are a lot (potentially infinite) apples / bombs this will not work.</fr:li>
          <fr:li>Need to modify so observations are images, but this makes problem significantly harder.</fr:li></fr:ul></fr:ul>
</fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>3541</fr:anchor><fr:addr
type="user">log-0003</fr:addr><fr:route>log-0003.xml</fr:route><fr:title
text="11/14/2024">11/14/2024</fr:title><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:meta
name="author">false</fr:meta></fr:frontmatter><fr:mainmatter><fr:p>This day did not quite go to plan. The contrastive RL repo is not exactly how imagined it...</fr:p>
  
    <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>2573</fr:anchor><fr:addr
type="machine">#252</fr:addr><fr:route>unstable-252.xml</fr:route><fr:title
text="Daily Summary">Daily Summary</fr:title><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter>
    <fr:strong>GPU Project:</fr:strong>
    <fr:ul><fr:li>Have GPU kernel for part of chaining algorithm. Makes a CPU call for another part</fr:li>
      <fr:ul><fr:li>Need to write a kernel for a naturally sequential DP.</fr:li>
        <fr:li>My initial impression is just how to reuse any memory accesses that have been done for the current GPU kernel.</fr:li></fr:ul>
      <fr:li>Key question is does even a naive kernel implementation speed up the overall program due to the eliminated memory transfer between GPU and CPU?</fr:li></fr:ul>
    <fr:strong>Contrastive RL:</fr:strong>
    <fr:ul><fr:li>Question is how to do contrastive RL in a lifelong setting? i.e. non-episodic and potentially changing reward functions.</fr:li>
      <fr:li>Have a pretty good idea how to implement the ant gather environment. However, current setup returns object positions.</fr:li>
      <fr:ul><fr:li>If there are a lot (potentially infinite) apples / bombs this will not work.</fr:li>
          <fr:li>Need to modify so observations are images, but this makes problem significantly harder.</fr:li></fr:ul></fr:ul>
</fr:mainmatter><fr:backmatter /></fr:tree>
  

  
    <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>2575</fr:anchor><fr:addr
type="machine">#253</fr:addr><fr:route>unstable-253.xml</fr:route><fr:title
text="Tomorrow Todo's">Tomorrow Todo's</fr:title><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter>
<fr:ul><fr:li>Might not have time for self-study tomorrow. It is a packed day.</fr:li>
  <fr:li>For research,</fr:li>
  <fr:ul><fr:li><fr:strong>CRL stuff:</fr:strong> Render ant gather environment. Hopefully, before compilers meeting.</fr:li>
    <fr:li><fr:strong>Compilers stuff:</fr:strong> Have meeting. Need actionable goals for runtime information logging.</fr:li>
    <fr:li><fr:strong>LLMs stuff:</fr:strong> After group meeting, must make slides on weak-to-strong. Look at new version of paper.</fr:li></fr:ul>
  <fr:li>If I somehow have extra time, then continue with probability self study. Ideally, I get through the background chapter by Monday. We want to get to probability measures to do probability!</fr:li>
  <fr:ul><fr:li>It seems it may also be a good idea to get some background with discrete stochastic processes, so I may concurrently follow along an MIT courseware course. TBD.</fr:li></fr:ul></fr:ul>
</fr:mainmatter><fr:backmatter /></fr:tree>
  
</fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>