<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1008</fr:anchor><fr:addr
type="user">kak-003U</fr:addr><fr:route>kak-003U.xml</fr:route><fr:title
text="Threads on the hardware level">Threads on the hardware level</fr:title><fr:date><fr:year>2025</fr:year><fr:month>1</fr:month><fr:day>28</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>I have been wondering how multithreading is actually implemented on the hardware level. Here, I summarize my findings:
<fr:ul><fr:li>Threads have their own program counter and can fetch and decode instructions in parallel.</fr:li>
    <fr:li>Threads have their own registers, but <fr:strong>share</fr:strong> most execution resources i.e. memory, ALU, etc.</fr:li>
    <fr:li>Thread instructions are scheduled just as typical instructions to maximize throughput.</fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree>