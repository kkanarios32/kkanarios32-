<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>781</fr:anchor><fr:addr
type="user">kak-004H</fr:addr><fr:route>kak-004H.xml</fr:route><fr:title
text="Notes on Systems Programming">Notes on Systems Programming</fr:title><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>2</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>782</fr:anchor><fr:addr
type="machine">#273</fr:addr><fr:route>unstable-273.xml</fr:route><fr:title
text="Reading List / Useful Resources">Reading List / Useful Resources</fr:title><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>2</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p><fr:ul><fr:li><fr:link
type="external"
href="https://gee.cs.oswego.edu/dl/html/malloc.html">A Memory Allocator</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="https://wiki-prog.infoprepa.epita.fr/images/0/04/Malloc_tutorial.pdf">A Malloc Tutorial</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="https://github.com/DoctorWkt/acwj">A compiler writing journey</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="https://www.jmeiners.com/lc3-vm/">Writing your own Virtual Machine</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="http://www.catb.org/esr/structure-packing/">Struct alignment in C</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="https://maplant.com/2020-04-25-Writing-a-Simple-Garbage-Collector-in-C.html">Write a Simple Garbage Collector</fr:link></fr:li>
      <fr:li><fr:link
type="external"
href="https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c">Virual function explanation</fr:link></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>783</fr:anchor><fr:addr
type="user">kak-004I</fr:addr><fr:route>kak-004I.xml</fr:route><fr:title
text="Virtual Memory">Virtual Memory</fr:title><fr:date><fr:year>2025</fr:year><fr:month>2</fr:month><fr:day>2</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="kellenkanarios.xml"
addr="kellenkanarios"
title="Kellen Kanarios">Kellen Kanarios</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>In my foray into C programming, I have become thoroughly confused with virtual memory and the like. Mainly, what is malloc really doing? In the minimap2 library, they implement essentially their own memory management on top of malloc. The reason for this is what had me confused. I think the following summarizes my findings:
  <fr:ul><fr:li>When a process is started by the OS, it allocates virtual address space for the process.</fr:li>
    <fr:li>Within this virtual address space, malloc allocates memory on the heap. Namely, just returning a pointer (technically virtual address) to a block of memory of the desired size.</fr:li>
    <fr:ul><fr:li>Malloc is an OS system call and therefore stops execution of all threads.</fr:li>
      <fr:li>To get around this, they pre-allocate their own intra-thread memory (a large contiguous chunk) then allocate memory within this chunk throughout the program.</fr:li></fr:ul></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>785</fr:anchor><fr:addr
type="user">kak-0025</fr:addr><fr:route>kak-0025.xml</fr:route><fr:title
text="Stack vs. Heap">Stack vs. Heap</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>28</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>I often hear this question come up amongst performance-driven developers, and for the longest time I could never get a straight answer as to why the stack was so much better? After a long foray into the inner workings of how memory allocation is actually done, I think I finally have an answer. I do not want to forget this, so I am doing a quick write up here.</fr:p>
  
    <fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>786</fr:anchor><fr:addr
type="machine">#329</fr:addr><fr:route>unstable-329.xml</fr:route><fr:title
text="Why stack is faster.">Why stack is faster.</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>28</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
This all comes down to memory allocation. Prior to actually running the program, the operating system allocates some amount of memory for both the stack and the heap (I think around 2-4MB?).
<fr:ul><fr:li>Stack just increments stack pointer.</fr:li>
    <fr:li>Heap searches through <fr:link
type="external"
href="https://gee.cs.oswego.edu/dl/html/malloc.html">bins</fr:link>. 
    <fr:ul><fr:li>Apparently malloc is implemented via the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Buddy_memory_allocation">buddy algorithm</fr:link></fr:li>
        <fr:li>TODO: Look into this more.</fr:li></fr:ul></fr:li>
    <fr:li>Real speedup is when heap runs out of pre-allocated memory.
    <fr:ul><fr:li>Has to trap to OS to get more memory. Page-fault can result in write to disk and therefore eternal misery...</fr:li>
      <fr:li>Formally, this is known as "heap growth".</fr:li></fr:ul></fr:li></fr:ul>
</fr:mainmatter><fr:backmatter /></fr:tree>
  
</fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree>