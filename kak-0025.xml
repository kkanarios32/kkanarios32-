<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>2143</fr:anchor><fr:addr
type="user">kak-0025</fr:addr><fr:route>kak-0025.xml</fr:route><fr:title
text="Stack vs. Heap">Stack vs. Heap</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>28</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>I often hear this question come up amongst performance-driven developers, and for the longest time I could never get a straight answer as to why the stack was so much better? After a long foray into the inner workings of how memory allocation is actually done, I think I finally have an answer. I do not want to forget this, so I am doing a quick write up here.</fr:p>
  
    <fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>776</fr:anchor><fr:addr
type="machine">#319</fr:addr><fr:route>unstable-319.xml</fr:route><fr:title
text="Why stack is faster.">Why stack is faster.</fr:title><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>28</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
This all comes down to memory allocation. Prior to actually running the program, the operating system allocates some amount of memory for both the stack and the heap (I think around 2-4MB?).
<fr:ul><fr:li>Stack just increments stack pointer.</fr:li>
    <fr:li>Heap searches through <fr:link
type="external"
href="https://gee.cs.oswego.edu/dl/html/malloc.html">bins</fr:link>. 
    <fr:ul><fr:li>Apparently malloc is implemented via the <fr:link
type="external"
href="https://en.wikipedia.org/wiki/Buddy_memory_allocation">buddy algorithm</fr:link></fr:li>
        <fr:li>TODO: Look into this more.</fr:li></fr:ul></fr:li>
    <fr:li>Real speedup is when heap runs out of pre-allocated memory.
    <fr:ul><fr:li>Has to trap to OS to get more memory. Page-fault can result in write to disk and therefore eternal misery...</fr:li>
      <fr:li>Formally, this is known as "heap growth".</fr:li></fr:ul></fr:li></fr:ul>
</fr:mainmatter><fr:backmatter /></fr:tree>
  
</fr:mainmatter><fr:backmatter /></fr:tree>