<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>2535</fr:anchor><fr:addr
type="machine">#374</fr:addr><fr:route>unstable-374.xml</fr:route><fr:taxon>Question</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  <fr:ol><fr:li>In Figure 9.5, why do fourier features outperform polynomial features?
    <fr:ol><fr:li>The fourier features got lucky on the seeds (lol).</fr:li>
        <fr:li>The choice of <fr:tex
display="inline"><![CDATA[\boldsymbol {c}]]></fr:tex> is not specified. A good choice can provide improvement specific to the problem?</fr:li>
        <fr:li>Polynomial features range is very large. Can suffer from blowup or vanishing of features.</fr:li></fr:ol></fr:li>
    One of the advantages of fourier features mentioned previously is the ability to select which features to serve as your basis. However, for this setup I assume they just use all of the fourier features. This likely means it is more of an issue with the polynomial features and (c). If you have a large polynomial then even relative similar states <fr:tex
display="inline"><![CDATA[s_1 = 1.1]]></fr:tex>, <fr:tex
display="inline"><![CDATA[s_2 = 0.9]]></fr:tex>, <fr:tex
display="inline"><![CDATA[\ldots ]]></fr:tex> can blow up or vanish making them likely more unstable when using gradient-based methods.</fr:ol>
  </fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Context">Context</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>2536</fr:anchor><fr:addr
type="user">kak-000G</fr:addr><fr:route>kak-000G.xml</fr:route><fr:title
text="On-policy Prediction with Approximation">On-policy Prediction with Approximation</fr:title><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter><fr:p>In my opinion, the most important part of this chapter is now that when we update say a <fr:tex
display="inline"><![CDATA[Q]]></fr:tex> function for a specific state action pair <fr:tex
display="inline"><![CDATA[(s,a)]]></fr:tex>, then this update can affect the value of the <fr:tex
display="inline"><![CDATA[Q(s', a')]]></fr:tex> due to the reuse of the internal parameters.</fr:p>
  
    
    
    <fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1839</fr:anchor><fr:addr
type="machine">#367</fr:addr><fr:route>unstable-367.xml</fr:route><fr:title
text=" [sutton2022, 9.1]"> <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"
tid="9.1"
refid="sutton2022"><fr:link
type="local"
href="sutton2022.xml"
addr="sutton2022"
title="Reinforcement Learning: An Introduction">[sutton2022, 9.1]</fr:link></html:span></fr:title><fr:taxon>Exercise</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  
  <fr:p>Show that tabular methods are a special case of linear function approximation. What would the feature vectors be?</fr:p>

</fr:mainmatter><fr:backmatter /></fr:tree>
  

 
   
   <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1840</fr:anchor><fr:addr
type="machine">#368</fr:addr><fr:route>unstable-368.xml</fr:route><fr:taxon>Solution</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
<fr:p>As a linear function approximation method, we have two quantities <fr:tex
display="inline"><![CDATA[\boldsymbol {w}]]></fr:tex> and <fr:tex
display="inline"><![CDATA[\boldsymbol {x}(s)]]></fr:tex>. We make the update
<fr:tex
display="block"><![CDATA[w_{t + 1} = w_{t} + \alpha (r_t + \gamma  w_{t}^{\top } x_{t+1} - w_t^{\top } x_t) x_t]]></fr:tex>
In the tabular setting, we just assume that we have the capacity to represent every possible state. This means that <fr:tex
display="inline"><![CDATA[x(s) \in  \mathbb {R}^{|S|}]]></fr:tex>. Therefore, if we define the features as <fr:tex
display="inline"><![CDATA[x : s_i \mapsto  \boldsymbol {e}_i]]></fr:tex> then we can recover policy evaluation by taking,
<fr:tex
display="block"><![CDATA[r_i = \mathbb {E}_{a \sim  \pi , s \sim  p}[r(s_i)], \quad  w_i = v_{\pi }(s_i)]]></fr:tex></fr:p>
Substituting, we get 
<fr:tex
display="block"><![CDATA[ w_{t + 1} = w_{t} + \alpha (\mathbb {E}_{a \sim  \pi , s \sim  p}[r(s_i)] + v(s_{t + 1}) - v(s_{t})) \cdot  \boldsymbol {e}_i ]]></fr:tex>
Since <fr:tex
display="inline"><![CDATA[\boldsymbol {w}]]></fr:tex> is our vector of values, updating the <fr:tex
display="inline"><![CDATA[i]]></fr:tex>th entry is exactly performing exactly one update to <fr:tex
display="inline"><![CDATA[v_{\pi }(s_i)]]></fr:tex> in the tabular setting.
</fr:mainmatter><fr:backmatter /></fr:tree>
 

  
    
    
    <fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1841</fr:anchor><fr:addr
type="machine">#369</fr:addr><fr:route>unstable-369.xml</fr:route><fr:title
text=" [sutton2022, 9.2]"> <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"
tid="9.2"
refid="sutton2022"><fr:link
type="local"
href="sutton2022.xml"
addr="sutton2022"
title="Reinforcement Learning: An Introduction">[sutton2022, 9.2]</fr:link></html:span></fr:title><fr:taxon>Exercise</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  
  <fr:p>Why does (9.17) define <fr:tex
display="inline"><![CDATA[(n + 1)^k]]></fr:tex> distinct features for dimension k?</fr:p>

</fr:mainmatter><fr:backmatter /></fr:tree>
  

 
   
   <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1842</fr:anchor><fr:addr
type="machine">#370</fr:addr><fr:route>unstable-370.xml</fr:route><fr:taxon>Solution</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  <fr:p>For each <fr:tex
display="inline"><![CDATA[s_j]]></fr:tex>, there are <fr:tex
display="inline"><![CDATA[n + 1]]></fr:tex> options for <fr:tex
display="inline"><![CDATA[c_{i, j}]]></fr:tex>. Since there are <fr:tex
display="inline"><![CDATA[k]]></fr:tex>, <fr:tex
display="inline"><![CDATA[s_{j}]]></fr:tex>'s, there are <fr:tex
display="inline"><![CDATA[(n + 1)^k]]></fr:tex> total possible features for <fr:tex
display="inline"><![CDATA[x_i]]></fr:tex>.</fr:p>
</fr:mainmatter><fr:backmatter /></fr:tree>
 

  
    
    
    <fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1843</fr:anchor><fr:addr
type="machine">#371</fr:addr><fr:route>unstable-371.xml</fr:route><fr:title
text=" [sutton2022, 9.3]"> <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"
tid="9.3"
refid="sutton2022"><fr:link
type="local"
href="sutton2022.xml"
addr="sutton2022"
title="Reinforcement Learning: An Introduction">[sutton2022, 9.3]</fr:link></html:span></fr:title><fr:taxon>Exercise</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  
<fr:p>What <fr:tex
display="inline"><![CDATA[n]]></fr:tex> and <fr:tex
display="inline"><![CDATA[c_{i,j}]]></fr:tex> produce the feature vectors <fr:tex
display="block"><![CDATA[\mathbf {x}(s)=(1,s_{1},s_{2},s_{1}s_{2},s_{1}^{2},s_{2}^{2},s_{1}^{2}s_{2}^{2},s_{1}s_{2}^{2},s_{1}^{2}s_{2}^{2})^{\top }?]]></fr:tex></fr:p>

</fr:mainmatter><fr:backmatter /></fr:tree>
  

 
   
   <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1844</fr:anchor><fr:addr
type="machine">#372</fr:addr><fr:route>unstable-372.xml</fr:route><fr:taxon>Solution</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  <fr:p><fr:tex
display="inline"><![CDATA[n = 2]]></fr:tex> and <fr:tex
display="inline"><![CDATA[c_{ij}]]></fr:tex> as 
<fr:tex
display="block"><![CDATA[\boldsymbol {c_0} = [0, 0], \quad    \boldsymbol {c_1} = [1, 0] \\   \boldsymbol {c_2} = [0, 1], \quad    \boldsymbol {c_3} = [1, 1] \\   \boldsymbol {c_4} = [2, 0], \quad    \boldsymbol {c_5} = [0, 2] \\   \boldsymbol {c_6} = [2, 2], \quad    \boldsymbol {c_7} = [1, 2], \quad    \boldsymbol {c_8} = [2, 2]   ]]></fr:tex></fr:p>
</fr:mainmatter><fr:backmatter /></fr:tree>
 

    <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1845</fr:anchor><fr:addr
type="machine">#373</fr:addr><fr:route>unstable-373.xml</fr:route><fr:taxon>Question</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  <fr:ol><fr:li>In section 9.5.2, what do they mean when they say you can select <fr:tex
display="inline"><![CDATA[n]]></fr:tex> so all the fourier features can be used?
    <fr:ol><fr:li>Pick <fr:tex
display="inline"><![CDATA[n]]></fr:tex> so that <fr:tex
display="inline"><![CDATA[(n + 1)^k < mk^2]]></fr:tex>.</fr:li>
        <fr:li>Pick <fr:tex
display="inline"><![CDATA[n]]></fr:tex> so that <fr:tex
display="inline"><![CDATA[(n + 1)^k]]></fr:tex> is reasonable.</fr:li></fr:ol></fr:li>
    <fr:p>In the tabular case, I think (a) is correct. My initial understanding of state representation is as a representation learning i.e. compression type objective. If we assume that <fr:tex
display="inline"><![CDATA[s_i \in  [m]]]></fr:tex>, then we do not gain anything in the tabular setting if our value function vector is the same size as the underlying transition kernel. When in the continuous state space regime i.e. <fr:tex
display="inline"><![CDATA[s_i \in  [0,1]]]></fr:tex>, there is no amount of features that would overfit the transition kernel. Therefore, it is just about trying to learn as much as possible about the underlying relations of the state dimensions.</fr:p>
    <fr:p>In the <fr:tex
display="inline"><![CDATA[2]]></fr:tex>-dimensional case, the feature vector <fr:tex
display="inline"><![CDATA[c_i = [1,1]]]></fr:tex> would provide information on how <fr:tex
display="inline"><![CDATA[s_1]]></fr:tex> and <fr:tex
display="inline"><![CDATA[s_2]]></fr:tex> relate not just their specific values. You want the learning algorithm to understand the relationships, so that it can make better use of the internal parameters when learning something like a <fr:tex
display="inline"><![CDATA[Q]]></fr:tex> function. This is basically just SVD but instead of classification you are learning a <fr:tex
display="inline"><![CDATA[Q]]></fr:tex> function. The compression</fr:p></fr:ol>
  </fr:mainmatter><fr:backmatter /></fr:tree>

    <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1846</fr:anchor><fr:addr
type="machine">#374</fr:addr><fr:route>unstable-374.xml</fr:route><fr:taxon>Question</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  <fr:ol><fr:li>In Figure 9.5, why do fourier features outperform polynomial features?
    <fr:ol><fr:li>The fourier features got lucky on the seeds (lol).</fr:li>
        <fr:li>The choice of <fr:tex
display="inline"><![CDATA[\boldsymbol {c}]]></fr:tex> is not specified. A good choice can provide improvement specific to the problem?</fr:li>
        <fr:li>Polynomial features range is very large. Can suffer from blowup or vanishing of features.</fr:li></fr:ol></fr:li>
    One of the advantages of fourier features mentioned previously is the ability to select which features to serve as your basis. However, for this setup I assume they just use all of the fourier features. This likely means it is more of an issue with the polynomial features and (c). If you have a large polynomial then even relative similar states <fr:tex
display="inline"><![CDATA[s_1 = 1.1]]></fr:tex>, <fr:tex
display="inline"><![CDATA[s_2 = 0.9]]></fr:tex>, <fr:tex
display="inline"><![CDATA[\ldots ]]></fr:tex> can blow up or vanish making them likely more unstable when using gradient-based methods.</fr:ol>
  </fr:mainmatter><fr:backmatter /></fr:tree>

  
    
    
    <fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1847</fr:anchor><fr:addr
type="machine">#375</fr:addr><fr:route>unstable-375.xml</fr:route><fr:title
text=" [sutton2022, 9.4]"> <html:span
xmlns:html="http://www.w3.org/1999/xhtml"
class="link-reference"
tid="9.4"
refid="sutton2022"><fr:link
type="local"
href="sutton2022.xml"
addr="sutton2022"
title="Reinforcement Learning: An Introduction">[sutton2022, 9.4]</fr:link></html:span></fr:title><fr:taxon>Exercise</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>
  
  <fr:p>You could do anisotropic (big word for asymmetric) tile partitioning. If we consider the two state dimensions as (x,y) coordinates and suppose that we want to only generalize across the <fr:tex
display="inline"><![CDATA[y]]></fr:tex>-direction i.e. we want states with the same <fr:tex
display="inline"><![CDATA[x]]></fr:tex> coordinate to have similar values then we would tile with long thin tiles. Therefore, states with the same <fr:tex
display="inline"><![CDATA[x]]></fr:tex> coordinate would lie in the same vertical tile and if the tiles are very thin any change in <fr:tex
display="inline"><![CDATA[x]]></fr:tex>-coordinate would lie in disjoint tiles.</fr:p>

</fr:mainmatter><fr:backmatter /></fr:tree>
  

    <fr:tree
toc="false"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>1848</fr:anchor><fr:addr
type="machine">#376</fr:addr><fr:route>unstable-376.xml</fr:route><fr:taxon>Remark</fr:taxon><fr:date><fr:year>2024</fr:year><fr:month>11</fr:month><fr:day>5</fr:day></fr:date><fr:authors /></fr:frontmatter><fr:mainmatter>I think that RBF as a continuous generalization coarse-coding is a nice intuition I want to remember here. Essentially, you just weight a state by how close it is to the center of the receptive field. This weighting is done via a Gaussian kernel, which I believe is arbitrary and can be any distance measure of choice.</fr:mainmatter><fr:backmatter /></fr:tree>
</fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>